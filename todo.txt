TODO

- integration test: subroutine

- integration test: stack push

- integration test: stack pop

- STR broken: allocation of the store doesn't work.

- Backend.cycle_eu_table should move to EUTable.

- option to disable speculative execution

- dedicated EU for ALU, LOAD/STORE etc

- integration test: easy way to test that a variable has some value

- there is no back pressure if there are no physical registers, just panic
    - each instruction should track how many physical registers it needs
    and don't allow for an instruction to get a rs if there are not sufficient
    physical registers.

- optimize the flush of the ROB (idle entries can be skipped)

- implement store buffer flush

- restore the 'control' instr

- add DSB

- unit tests!

- support for precise exceptions

- syntax: case insensitive keywords

- syntax: single line comments

- syntax: multiline comment

- syntax: new lines

- syntax: unwanted semicolon after instructions

- store to load forwarding: currently the store in the sb isn't seen so CPU becomes incoherent

- implement print of memory

- CPU metrics frequency:
    - currently it is tied to the CPU frequency; but at higher frequency, the output will go too fast.

DONE

- integration test for STR

- add test harness

- integration test for LDR

- improved overflow/underflow handling of ADD/SUB/MUL.

- the DWordType should be an unsigned u64

- EU doesn't need Instr to be passed to cycle method

- EU should have access to memory subsystem on construction

- pull out the execute method for EU

- the WordType should be called DWordType

- integration tests!

- option to trace pipeline flushes

- case insensitive registers

- recording number of instruction that will not retire due to bad speculation

