BUGS

- fix BNE

- there is no back pressure if there are no physical registers, just panic
    - each instruction should track how many physical registers it needs to allocate
    and don't allow for an instruction to get a rs if there are not sufficient
    physical registers.

- restore the 'control' instr

- store to load forwarding: currently the store in the sb isn't seen so CPU becomes incoherent

TODO

- cdb_broadcast_buffer filling should be done in execute

- SDIV proper division by zero handling

- fix parsing of instructions that modify the control flow implicitly (so when accessing e.g. IP)

- fix CMP

- fix EXIT

- operands can move to the AST section since not used inside the CPU

- program/loader should not construct 'Instr'; they are CPU internal detail for decoded instructions

- LoadStoreInstr implement Display

- DataProcessingInstr implement Display

- BranchInstr implement Display

- add ConditionCode operand

- add TST

- add TEQ

- add MVN

- add CSINC

- add CSEL

- add CSET

- clean up the pc_update in the B.. methods

- add test CMP/BEQ

- add test CMP/BLE

- integration test: stack push

- integration test: stack pop

- Backend.cycle_eu_table should move to EUTable.

- option to disable speculative execution

- dedicated EU for ALU, LOAD/STORE etc

- optimize the flush of the ROB (idle entries can be skipped)

- support for precise exceptions

- syntax: case insensitive keywords

- syntax: single line comments

- syntax: multiline comment

- syntax: new lines

- syntax: unwanted semicolon after instructions

DONE

- fix CMP execution
    - how to properly deal with the original value of the CMP register.
    with normal dataprocessing operands, the whole destination register is updated
    but in this case we only want to set/unset specific flags and therefor we need to know
    the original value of the register.

- fix ORR

- add test for ORR

- fix EOR

- add test for EOR

- fix AND

- add test for AND

- CDBbroadcast: missing branch

- fix CMP parsing

- fix test_store
        phys register 1 is not in busy state

- only an LDR should trigger a register update on CDB. Now it is also done for a store.

- fix LDR/STR parsing

- fix test_rsb

- retirement missing

- on execution, the physical registers written, need to be send to the ROB

- the rob slot should keep track of the renamed registers that need to be written.

- fix MOV
    - the problem is that MOV currently doesn't fit nicely in the DataProcessing when there is a direct value
      MOV r1, #10
      The problem is that rn register isn't used in this case.

- CDBBroadcast: missing load/store

- DataProcessing: operand 2

- DataProcessingInstr: register renaming

- LoadStore instruction: register renaming

- DataProcessing: Operand2 doesn't need to be available at all.

- RSInstr:DataProcessing deal properly with the operand2

- CDBbroadcast not implemented

- follow the ARM instruction layout

- figure out how the reservation station needs to deal with the different instruction classes

- fix frontend with the new instruction hierarchy

- pull out fields for RSInstr enum

- pull out fields for Instr enum

- NOP: how does it fit into the new instruction hierarchy

- PRINTR: how does it fit into the new instruction hierarchy

