use std::str::FromStr;
use crate::instructions::instructions::RegisterType;
use crate::loader::ast::{
        ASTOperand,  ASTRegisterOperand, ASTImmediateOperand, ASTLabelOperand, ASTAddressOfOperand, ASTInstr,
        ASTData, ASTTextSection, ASTDataSection, ASTAssemblyFile, ASTDirective, ASTTextLine,  ASTDataLine,
        ASTLabel,  ASTPreamble, ASTMemRegisterIndirectOperand};
use crate::cpu::{SP,FP,LR,PC};
// https://gist.github.com/brendanzab/4c5e5e1836ecc3a46afd05ed046c695c

grammar;

Integer: u64 = {
    r"[0-9]+" => u64::from_str(<>).unwrap()
};

Mnemonic: String = {
    r"[a-zA-Z_][a-zA-Z0-9_]*" => String::from(<>),
};

VariableName: String = {
    r"[a-zA-Z_][a-zA-Z0-9_]*" => String::from(<>),
};

Operand_Sep: () = {
    ","  => (),
}

LabelName: String = {
    r"[a-zA-Z_][a-zA-Z0-9_]*" => String::from(<>),
}

Operand: ASTOperand = {
    <o:RegisterOperand>         => ASTOperand::Register(o),
    <o:ImmediateOperand>        => ASTOperand::Immediate(o),
    <o:LabelOperand>            => ASTOperand::Label(o),
    <o:AddressOfOperand>        => ASTOperand::AddressOf(o),
    <o:MemoryAccessOperand>     => ASTOperand::MemRegisterIndirect(o),
//    MemoryAccess,
}

MemoryAccessOperand: ASTMemRegisterIndirectOperand = {
    <start:@L> "[" <b:RegisterOperand> "]"                       => ASTMemRegisterIndirectOperand{reg_id:b.reg_id, pos:start},
//    <start:@L> "[" <b:Register> "," <o:Immediate> "]"     => {
//                                                                let ASTOperand::Register(register, _) = b else { panic!() };
//                                                                let ASTOperand::Immediate(offset, _) = b else { panic!() };
//                                                                ASTOperand::MemRegIndirectWithOffset(register, offset, start)
//                                                             },
//    <start:@L> "[" <b:Register> "," <r:Register> "]"     =>  {
//                                                                let ASTOperand::Register(register, _) = b else { panic!() };
//                                                                let ASTOperand::Register(offset, _) = b else { panic!() };
//                                                                ASTOperand::MemRegIndirectWithRegOffset(register, offset, start)
//                                                             },
}

// with a regular expression, the following would lead to conflicts.
// For the time being the capitalized versions are explicitly added due to difficulties with case insensitivity.
RegisterOperand: ASTRegisterOperand = {
    <start:@L>  "r0"            => ASTRegisterOperand{reg_id:0 as RegisterType, pos:start},
    <start:@L>  "R0"            => ASTRegisterOperand{reg_id:0 as RegisterType, pos:start},
    <start:@L>  "r1"            => ASTRegisterOperand{reg_id:1 as RegisterType, pos:start},
    <start:@L>  "R1"            => ASTRegisterOperand{reg_id:1 as RegisterType, pos:start},
    <start:@L>  "r2"            => ASTRegisterOperand{reg_id:2 as RegisterType, pos:start},
    <start:@L>  "R2"            => ASTRegisterOperand{reg_id:2 as RegisterType, pos:start},
    <start:@L>  "r3"            => ASTRegisterOperand{reg_id:3 as RegisterType, pos:start},
    <start:@L>  "R3"            => ASTRegisterOperand{reg_id:3 as RegisterType, pos:start},
    <start:@L>  "r4"            => ASTRegisterOperand{reg_id:4 as RegisterType, pos:start},
    <start:@L>  "R4"            => ASTRegisterOperand{reg_id:4 as RegisterType, pos:start},
    <start:@L>  "r5"            => ASTRegisterOperand{reg_id:5 as RegisterType, pos:start},
    <start:@L>  "R5"            => ASTRegisterOperand{reg_id:5 as RegisterType, pos:start},
    <start:@L>  "r6"            => ASTRegisterOperand{reg_id:6 as RegisterType, pos:start},
    <start:@L>  "R6"            => ASTRegisterOperand{reg_id:6 as RegisterType, pos:start},
    <start:@L>  "r7"            => ASTRegisterOperand{reg_id:7 as RegisterType, pos:start},
    <start:@L>  "R7"            => ASTRegisterOperand{reg_id:7 as RegisterType, pos:start},
    <start:@L>  "r8"            => ASTRegisterOperand{reg_id:8 as RegisterType, pos:start},
    <start:@L>  "R8"            => ASTRegisterOperand{reg_id:8 as RegisterType, pos:start},
    <start:@L>  "r9"            => ASTRegisterOperand{reg_id:9 as RegisterType, pos:start},
    <start:@L>  "R9"            => ASTRegisterOperand{reg_id:9 as RegisterType, pos:start},
    <start:@L>  "r10"           => ASTRegisterOperand{reg_id:10 as RegisterType, pos:start},
    <start:@L>  "R10"           => ASTRegisterOperand{reg_id:10 as RegisterType, pos:start},
    <start:@L>  "r11"           => ASTRegisterOperand{reg_id:11 as RegisterType, pos:start},
    <start:@L>  "R11"           => ASTRegisterOperand{reg_id:11 as RegisterType, pos:start},
    <start:@L>  "r12"           => ASTRegisterOperand{reg_id:12 as RegisterType, pos:start},
    <start:@L>  "R12"           => ASTRegisterOperand{reg_id:12 as RegisterType, pos:start},
    <start:@L>  "r13"           => ASTRegisterOperand{reg_id:13 as RegisterType, pos:start},
    <start:@L>  "R13"           => ASTRegisterOperand{reg_id:13 as RegisterType, pos:start},
    <start:@L>  "r14"           => ASTRegisterOperand{reg_id:14 as RegisterType, pos:start},
    <start:@L>  "R14"           => ASTRegisterOperand{reg_id:14 as RegisterType, pos:start},
    <start:@L>  "r15"           => ASTRegisterOperand{reg_id:15 as RegisterType, pos:start},
    <start:@L>  "R15"           => ASTRegisterOperand{reg_id:15 as RegisterType, pos:start},
    <start:@L>  "r16"           => ASTRegisterOperand{reg_id:16 as RegisterType, pos:start},
    <start:@L>  "R16"           => ASTRegisterOperand{reg_id:16 as RegisterType, pos:start},
    <start:@L>  "r17"           => ASTRegisterOperand{reg_id:17 as RegisterType, pos:start},
    <start:@L>  "R17"           => ASTRegisterOperand{reg_id:17 as RegisterType, pos:start},
    <start:@L>  "r18"           => ASTRegisterOperand{reg_id:18 as RegisterType, pos:start},
    <start:@L>  "R18"           => ASTRegisterOperand{reg_id:18 as RegisterType, pos:start},
    <start:@L>  "r19"           => ASTRegisterOperand{reg_id:19 as RegisterType, pos:start},
    <start:@L>  "R19"           => ASTRegisterOperand{reg_id:19 as RegisterType, pos:start},
    <start:@L>  "r20"           => ASTRegisterOperand{reg_id:20 as RegisterType, pos:start},
    <start:@L>  "R20"           => ASTRegisterOperand{reg_id:20 as RegisterType, pos:start},
    <start:@L>  "r21"           => ASTRegisterOperand{reg_id:21 as RegisterType, pos:start},
    <start:@L>  "R21"           => ASTRegisterOperand{reg_id:21 as RegisterType, pos:start},
    <start:@L>  "r22"           => ASTRegisterOperand{reg_id:22 as RegisterType, pos:start},
    <start:@L>  "R22"           => ASTRegisterOperand{reg_id:22 as RegisterType, pos:start},
    <start:@L>  "r23"           => ASTRegisterOperand{reg_id:23 as RegisterType, pos:start},
    <start:@L>  "R23"           => ASTRegisterOperand{reg_id:23 as RegisterType, pos:start},
    <start:@L>  "r24"           => ASTRegisterOperand{reg_id:24 as RegisterType, pos:start},
    <start:@L>  "R24"           => ASTRegisterOperand{reg_id:24 as RegisterType, pos:start},
    <start:@L>  "r25"           => ASTRegisterOperand{reg_id:25 as RegisterType, pos:start},
    <start:@L>  "R25"           => ASTRegisterOperand{reg_id:25 as RegisterType, pos:start},
    <start:@L>  "r26"           => ASTRegisterOperand{reg_id:26 as RegisterType, pos:start},
    <start:@L>  "R26"           => ASTRegisterOperand{reg_id:26 as RegisterType, pos:start},
    <start:@L>  "r27"           => ASTRegisterOperand{reg_id:27 as RegisterType, pos:start},
    <start:@L>  "R27"           => ASTRegisterOperand{reg_id:27 as RegisterType, pos:start},
    <start:@L>  "r28"           => ASTRegisterOperand{reg_id:28 as RegisterType, pos:start},
    <start:@L>  "R28"           => ASTRegisterOperand{reg_id:28 as RegisterType, pos:start},
    <start:@L>  "r29"           => ASTRegisterOperand{reg_id:29 as RegisterType, pos:start},
    <start:@L>  "R29"           => ASTRegisterOperand{reg_id:29 as RegisterType, pos:start},
    <start:@L>  "r30"           => ASTRegisterOperand{reg_id:30 as RegisterType, pos:start},
    <start:@L>  "R30"           => ASTRegisterOperand{reg_id:30 as RegisterType, pos:start},
    <start:@L>  "fp"            => ASTRegisterOperand{reg_id:FP, pos:start},
    <start:@L>  "FP"            => ASTRegisterOperand{reg_id:FP, pos:start},
    <start:@L>  "sp"            => ASTRegisterOperand{reg_id:SP, pos:start},
    <start:@L>  "SP"            => ASTRegisterOperand{reg_id:SP, pos:start},
    <start:@L>  "lr"            => ASTRegisterOperand{reg_id:LR, pos:start},
    <start:@L>  "LR"            => ASTRegisterOperand{reg_id:LR, pos:start},
    <start:@L>  "pc"            => ASTRegisterOperand{reg_id:PC, pos:start},
    <start:@L>  "PC"            => ASTRegisterOperand{reg_id:PC, pos:start}
};

ImmediateOperand: ASTImmediateOperand = {
    <start:@L> "#" <v:Integer> => ASTImmediateOperand{value:v, pos:start},
};

AddressOfOperand: ASTAddressOfOperand = {
    <start:@L> "=" <l:LabelName> => ASTAddressOfOperand{label:l, offset:0, pos:start},
};

LabelOperand: ASTLabelOperand = {
     <start:@L> <l:LabelName> => ASTLabelOperand{label:l, offset:0, pos:start},
};

Directive: ASTDirective = {
   <start:@L> ".global" <l:LabelName> => ASTDirective::Global(l, start),
}

DataLine: ASTDataLine = {
    Data => ASTDataLine::Data(<>),
    Directive => ASTDataLine::Directive(<>)
}

Data: ASTData = {
    <start:@L> <n:VariableName> ":" ".dword" <v:Integer> => ASTData{name:n, value:v, pos:start}
}

DataSection:ASTDataSection = {
    ".data" <l:DataLine*>                 => ASTDataSection{lines:l},
    ".section" ".data" <l:DataLine*>      => ASTDataSection{lines:l},
}

Label: ASTLabel = {
    <start:@L> <n:LabelName> ":" => ASTLabel{name:n, pos:start},
}

Instr: ASTInstr = {
   <start:@L> <m:Mnemonic> ";"
            => ASTInstr{mnemonic:m, op1:ASTOperand::Unused(), op2:ASTOperand::Unused(), op3:ASTOperand::Unused(), pos:start},
   <start:@L> <m:Mnemonic>  <o1:Operand> ";"
             => ASTInstr{mnemonic:m, op1:o1, op2:ASTOperand::Unused(), op3:ASTOperand::Unused(), pos:start},
   <start:@L> <m:Mnemonic>  <o1:Operand> Operand_Sep <o2:Operand> ";"
             => ASTInstr{mnemonic:m, op1:o1, op2:o2, op3:ASTOperand::Unused(), pos:start},
   <start:@L> <m:Mnemonic>  <o1:Operand> Operand_Sep <o2:Operand> Operand_Sep <o3:Operand> ";"
             => ASTInstr{mnemonic:m, op1:o1, op2:o2, op3:o3, pos:start},
}

TextSection: ASTTextSection = {
    ".text" <l:TextLine*>              => ASTTextSection{lines:l},
    ".section" ".text" <l:TextLine*>   => ASTTextSection{lines:l},
}

TextLine: ASTTextLine = {
    Instr                           => ASTTextLine::Text(<>),
    Directive                       => ASTTextLine::Directive(<>),
    Label                           => ASTTextLine::Label(<>),
}

Preamble: ASTPreamble ={
    Directive* => ASTPreamble{directives:<>},
}

pub AssemblyFile: ASTAssemblyFile = {
    <p: Preamble> <ds_before: DataSection*> <ts: TextSection> <ds_after: DataSection*>
        => ASTAssemblyFile{preamble: p, ds_before, ts, ds_after},
}