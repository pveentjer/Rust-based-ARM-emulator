use std::str::FromStr;
use crate::loader::ast::{ASTOperand, ASTInstr, ASTData, ASTTextSection, ASTDataSection, ASTAssemblyFile, ASTDirective, ASTTextLine, ASTDataLine, ASTLabel,ASTPreamble};
use crate::cpu::{SP,FP,LR,PC};
// https://gist.github.com/brendanzab/4c5e5e1836ecc3a46afd05ed046c695c

grammar;

Integer: u64 = {
    r"[0-9]+" => u64::from_str(<>).unwrap()
};

Mnemonic: String = {
    r"[a-zA-Z_][a-zA-Z0-9_]*" => String::from(<>),
};

VariableName: String = {
    r"[a-zA-Z_][a-zA-Z0-9_]*" => String::from(<>),
};

Operand_Sep: () = {
    ","  => (),
}

LabelName: String = {
    r"[a-zA-Z_][a-zA-Z0-9_]*" => String::from(<>),
}

Operand: ASTOperand = {
    Register,
    Immediate,
    LabelOperand,
    AddressOf,
    MemoryAccess,
}

MemoryAccess: ASTOperand = {
    <start:@L> "[" <b:Register> "]"                       => {
                                                                let ASTOperand::Register(register, _) = b else { panic!() };
                                                                ASTOperand::MemRegisterIndirect(register, start)
                                                             },
//    <start:@L> "[" <b:Register> "," <o:Immediate> "]"     => {
//                                                                let ASTOperand::Register(register, _) = b else { panic!() };
//                                                                let ASTOperand::Immediate(offset, _) = b else { panic!() };
//                                                                ASTOperand::MemRegIndirectWithOffset(register, offset, start)
//                                                             },
//    <start:@L> "[" <b:Register> "," <r:Register> "]"     =>  {
//                                                                let ASTOperand::Register(register, _) = b else { panic!() };
//                                                                let ASTOperand::Register(offset, _) = b else { panic!() };
//                                                                ASTOperand::MemRegIndirectWithRegOffset(register, offset, start)
//                                                             },
}

// with a regular expression, the following would lead to conflicts.
// For the time being the capitalized versions are explicitly added due to difficulties with case insensitivity.
Register: ASTOperand = {
    <start:@L>  "r0"            => ASTOperand::Register(0, start),
    <start:@L>  "R0"            => ASTOperand::Register(0, start),
    <start:@L>  "r1"            => ASTOperand::Register(1, start),
    <start:@L>  "R1"            => ASTOperand::Register(1, start),
    <start:@L>  "r2"            => ASTOperand::Register(2, start),
    <start:@L>  "R2"            => ASTOperand::Register(2, start),
    <start:@L>  "r3"            => ASTOperand::Register(3, start),
    <start:@L>  "R3"            => ASTOperand::Register(3, start),
    <start:@L>  "r4"            => ASTOperand::Register(4, start),
    <start:@L>  "R4"            => ASTOperand::Register(4, start),
    <start:@L>  "r5"            => ASTOperand::Register(5, start),
    <start:@L>  "R5"            => ASTOperand::Register(5, start),
    <start:@L>  "r6"            => ASTOperand::Register(6, start),
    <start:@L>  "R6"            => ASTOperand::Register(6, start),
    <start:@L>  "r7"            => ASTOperand::Register(7, start),
    <start:@L>  "R7"            => ASTOperand::Register(7, start),
    <start:@L>  "r8"            => ASTOperand::Register(8, start),
    <start:@L>  "R8"            => ASTOperand::Register(8, start),
    <start:@L>  "r9"            => ASTOperand::Register(9, start),
    <start:@L>  "R9"            => ASTOperand::Register(9, start),
    <start:@L>  "r10"           => ASTOperand::Register(10, start),
    <start:@L>  "R10"           => ASTOperand::Register(10, start),
    <start:@L>  "r11"           => ASTOperand::Register(11, start),
    <start:@L>  "R11"           => ASTOperand::Register(11, start),
    <start:@L>  "r12"           => ASTOperand::Register(12, start),
    <start:@L>  "R12"           => ASTOperand::Register(12, start),
    <start:@L>  "r13"           => ASTOperand::Register(13, start),
    <start:@L>  "R13"           => ASTOperand::Register(13, start),
    <start:@L>  "r14"           => ASTOperand::Register(14, start),
    <start:@L>  "R14"           => ASTOperand::Register(14, start),
    <start:@L>  "r15"           => ASTOperand::Register(15, start),
    <start:@L>  "R15"           => ASTOperand::Register(15, start),
    <start:@L>  "r16"           => ASTOperand::Register(16, start),
    <start:@L>  "R16"           => ASTOperand::Register(16, start),
    <start:@L>  "r17"           => ASTOperand::Register(17, start),
    <start:@L>  "R17"           => ASTOperand::Register(17, start),
    <start:@L>  "r18"           => ASTOperand::Register(18, start),
    <start:@L>  "R18"           => ASTOperand::Register(18, start),
    <start:@L>  "r19"           => ASTOperand::Register(19, start),
    <start:@L>  "R19"           => ASTOperand::Register(19, start),
    <start:@L>  "r20"           => ASTOperand::Register(20, start),
    <start:@L>  "R20"           => ASTOperand::Register(20, start),
    <start:@L>  "r21"           => ASTOperand::Register(21, start),
    <start:@L>  "R21"           => ASTOperand::Register(21, start),
    <start:@L>  "r22"           => ASTOperand::Register(22, start),
    <start:@L>  "R22"           => ASTOperand::Register(22, start),
    <start:@L>  "r23"           => ASTOperand::Register(23, start),
    <start:@L>  "R23"           => ASTOperand::Register(23, start),
    <start:@L>  "r24"           => ASTOperand::Register(24, start),
    <start:@L>  "R24"           => ASTOperand::Register(24, start),
    <start:@L>  "r25"           => ASTOperand::Register(25, start),
    <start:@L>  "R25"           => ASTOperand::Register(25, start),
    <start:@L>  "r26"           => ASTOperand::Register(26, start),
    <start:@L>  "R26"           => ASTOperand::Register(26, start),
    <start:@L>  "r27"           => ASTOperand::Register(27, start),
    <start:@L>  "R27"           => ASTOperand::Register(27, start),
    <start:@L>  "r28"           => ASTOperand::Register(28, start),
    <start:@L>  "R28"           => ASTOperand::Register(28, start),
    <start:@L>  "r29"           => ASTOperand::Register(29, start),
    <start:@L>  "R29"           => ASTOperand::Register(29, start),
    <start:@L>  "r30"           => ASTOperand::Register(30, start),
    <start:@L>  "R30"           => ASTOperand::Register(30, start),
    <start:@L>  "fp"            => ASTOperand::Register(FP as u64, start),
    <start:@L>  "FP"            => ASTOperand::Register(FP as u64, start),
    <start:@L>  "sp"            => ASTOperand::Register(SP as u64, start),
    <start:@L>  "SP"            => ASTOperand::Register(SP as u64, start),
    <start:@L>  "lr"            => ASTOperand::Register(LR as u64, start),
    <start:@L>  "LR"            => ASTOperand::Register(LR as u64, start),
    <start:@L>  "pc"            => ASTOperand::Register(PC as u64, start),
    <start:@L>  "PC"            => ASTOperand::Register(PC as u64, start)
};


Immediate: ASTOperand = {
    <start:@L> "#" <i:Integer> => ASTOperand::Immediate(i, start),
};

AddressOf: ASTOperand = {
    <start:@L> "=" <l:LabelName> => ASTOperand::AddressOf(l, start),
};

LabelOperand: ASTOperand = {
     <start:@L> <l:LabelName> => ASTOperand::Label(l, start),
};

Directive: ASTDirective = {
   <start:@L> ".global" <l:LabelName> => ASTDirective::Global(l, start),
}

DataLine: ASTDataLine = {
    Data => ASTDataLine::Data(<>),
    Directive => ASTDataLine::Directive(<>)
}

Data: ASTData = {
    <start:@L> <n:VariableName> ":" ".word" <v:Integer> => ASTData{name:n, value:v, pos:start}
}

DataSection:ASTDataSection = {
    ".data" <l:DataLine*>                 => ASTDataSection{lines:l},
    ".section" ".data" <l:DataLine*>      => ASTDataSection{lines:l},
}

Label: ASTLabel = {
    <start:@L> <n:LabelName> ":" => ASTLabel{name:n, pos:start},
}

Instr: ASTInstr = {
   <start:@L> <m:Mnemonic> ";"
            => ASTInstr{mnemonic:m, op1:ASTOperand::Unused(), op2:ASTOperand::Unused(), op3:ASTOperand::Unused(), pos:start},
   <start:@L> <m:Mnemonic>  <o1:Operand> ";"
             => ASTInstr{mnemonic:m, op1:o1, op2:ASTOperand::Unused(), op3:ASTOperand::Unused(), pos:start},
   <start:@L> <m:Mnemonic>  <o1:Operand> Operand_Sep <o2:Operand> ";"
             => ASTInstr{mnemonic:m, op1:o1, op2:o2, op3:ASTOperand::Unused(), pos:start},
   <start:@L> <m:Mnemonic>  <o1:Operand> Operand_Sep <o2:Operand> Operand_Sep <o3:Operand> ";"
             => ASTInstr{mnemonic:m, op1:o1, op2:o2, op3:o3, pos:start},
}

TextSection: ASTTextSection = {
    ".text" <l:TextLine*>              => ASTTextSection{lines:l},
    ".section" ".text" <l:TextLine*>   => ASTTextSection{lines:l},
}

TextLine: ASTTextLine = {
    Instr                           => ASTTextLine::Text(<>),
    Directive                       => ASTTextLine::Directive(<>),
    Label                           => ASTTextLine::Label(<>),
}

Preamble: ASTPreamble ={
    Directive* => ASTPreamble{directives:<>},
}

pub AssemblyFile: ASTAssemblyFile = {
    <p: Preamble> <ds_before: DataSection*> <ts: TextSection> <ds_after: DataSection*>
        => ASTAssemblyFile{preamble: p, ds_before, ts, ds_after},
}